---
interface Props {
  code: string;
  className?: string;
}

const { code, className } = Astro.props;
---

<div class={`mermaid ${className || ""}`} data-mermaid={code}>
  <pre><code>{code}</code></pre>
</div>

<script>
  import mermaid from "mermaid";

  // Initialize mermaid with theme support
  function initMermaid() {
    const isDark = document.documentElement.classList.contains("dark");
    
    mermaid.initialize({
      startOnLoad: false,
      theme: isDark ? "dark" : "default",
      themeVariables: isDark
        ? {
            primaryColor: "#a78bfa",
            primaryTextColor: "#e4e4e7",
            primaryBorderColor: "#6366f1",
            lineColor: "#6366f1",
            secondaryColor: "#818cf8",
            tertiaryColor: "#c084fc",
            background: "#18181b",
            mainBkg: "#27272a",
            secondBkg: "#3f3f46",
            tertiaryBkg: "#52525b",
            secondaryBorderColor: "#818cf8",
            tertiaryBorderColor: "#c084fc",
            textColor: "#e4e4e7",
            labelTextColor: "#e4e4e7",
            errorBkgColor: "#991b1b",
            errorTextColor: "#fef2f2",
          }
        : {
            primaryColor: "#6366f1",
            primaryTextColor: "#111827",
            primaryBorderColor: "#4f46e5",
            lineColor: "#4f46e5",
            secondaryColor: "#818cf8",
            tertiaryColor: "#a78bfa",
          },
    });

    // Render all mermaid diagrams
    document.querySelectorAll(".mermaid").forEach((element) => {
      const code = element.getAttribute("data-mermaid");
      if (code) {
        element.innerHTML = "";
        mermaid.render(`mermaid-${Math.random().toString(36).substring(2, 11)}`, code).then(({ svg }) => {
          element.innerHTML = svg;
        });
      }
    });
  }

  // Initialize on load
  document.addEventListener("DOMContentLoaded", initMermaid);

  // Reinitialize on theme change
  document.addEventListener("astro:after-swap", initMermaid);

  // Listen for theme changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === "class") {
        initMermaid();
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });
</script>

<style>
  .mermaid {
    display: flex;
    justify-content: center;
    margin: 2rem 0;
    background-color: transparent;
  }

  .mermaid pre {
    display: none;
  }

  .mermaid svg {
    max-width: 100%;
    height: auto;
  }
</style>