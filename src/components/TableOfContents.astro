---
interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;

// h1은 제외하고 h2-h6만 포함
const tocHeadings = headings.filter(
  (heading) => heading.depth > 1 && heading.depth <= 6,
);
---

{
  tocHeadings.length > 0 && (
    <nav id="table-of-contents" class="toc-container hidden xl:block">
      <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-lg dark:border-zinc-700 dark:bg-zinc-800">
        <h3 class="mb-3 border-b border-gray-200 pb-2 text-sm font-semibold text-gray-900 dark:border-zinc-600 dark:text-gray-100">
          목차
        </h3>
        <ul class="space-y-1 text-sm">
          {tocHeadings.map((heading) => (
            <li
              class={`toc-item toc-level-${heading.depth}`}
              style={`margin-left: ${(heading.depth - 2) * 0.75}rem`}
            >
              <a
                href={`#${heading.slug}`}
                class="block rounded px-2 py-1 text-xs leading-relaxed text-gray-600 transition-colors duration-200 hover:bg-gray-50 hover:text-blue-600 dark:text-gray-400 dark:hover:bg-zinc-700 dark:hover:text-blue-400"
                data-heading-id={heading.slug}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </nav>
  )
}

<script>
  function initTableOfContents() {
    const tocLinks = document.querySelectorAll(
      "#table-of-contents a[data-heading-id]",
    );
    const headingElements = Array.from(tocLinks)
      .map((link) => {
        const id = link.getAttribute("data-heading-id");
        return document.getElementById(id);
      })
      .filter(Boolean);

    if (headingElements.length === 0) return;

    const observer = new IntersectionObserver(
      (entries) => {
        let activeHeading = null;

        // 현재 보이는 헤딩 중 가장 위에 있는 것을 찾기
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            if (
              !activeHeading ||
              entry.target.offsetTop < activeHeading.offsetTop
            ) {
              activeHeading = entry.target;
            }
          }
        });

        // 모든 TOC 링크 비활성화
        tocLinks.forEach((link) => {
          link.classList.remove("toc-active");
        });

        // 활성 헤딩에 해당하는 TOC 링크 활성화
        if (activeHeading) {
          const activeLink = document.querySelector(
            `#table-of-contents a[data-heading-id="${activeHeading.id}"]`,
          );
          if (activeLink) {
            activeLink.classList.add("toc-active");
          }
        }
      },
      {
        rootMargin: "-20% 0px -70% 0px",
        threshold: 0.1,
      },
    );

    // 모든 헤딩 요소 관찰
    headingElements.forEach((heading) => {
      observer.observe(heading);
    });

    // 클릭 시 부드러운 스크롤
    tocLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const targetId = link.getAttribute("data-heading-id");
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          const offsetTop = targetElement.offsetTop - 100; // 헤더 높이 고려
          window.scrollTo({
            top: offsetTop,
            behavior: "smooth",
          });
        }
      });
    });
  }

  // 초기화
  document.addEventListener("DOMContentLoaded", initTableOfContents);

  // Astro의 페이지 전환 후에도 다시 초기화
  document.addEventListener("astro:after-swap", initTableOfContents);
</script>

<style>
  .toc-active {
    @apply bg-blue-50 font-bold text-blue-700 dark:bg-blue-900/30 dark:text-blue-300;
    border-left: 3px solid #2563eb;
  }

  /* TOC 컨테이너 스크롤바 스타일링 */
  #table-of-contents div::-webkit-scrollbar {
    width: 4px;
  }

  #table-of-contents div::-webkit-scrollbar-track {
    background: transparent;
  }

  #table-of-contents div::-webkit-scrollbar-thumb {
    background-color: rgb(156 163 175 / 0.5);
    border-radius: 2px;
  }

  #table-of-contents div::-webkit-scrollbar-thumb:hover {
    background-color: rgb(156 163 175 / 0.8);
  }

  /* 다크모드 스크롤바 */
  html.dark #table-of-contents div::-webkit-scrollbar-thumb {
    background-color: rgb(113 113 122 / 0.5);
  }

  html.dark #table-of-contents div::-webkit-scrollbar-thumb:hover {
    background-color: rgb(113 113 122 / 0.8);
  }
</style>
